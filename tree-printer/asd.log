    Checking tree-printer v0.1.0 (/home/daniel/Personal/szte/inverse-prufer/tree-printer)
warning: unused variable: `p`
  --> src/text.rs:32:9
   |
32 |     let p = Position::new(x, y);
   |         ^ help: if this is intentional, prefix it with an underscore: `_p`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: fields `top`, `right`, `bottom`, and `left` are never read
 --> src/config.rs:3:5
  |
2 | pub struct Inset {
  |            ----- fields in this struct
3 |     top: i32,
  |     ^^^
4 |     right: i32,
  |     ^^^^^
5 |     bottom: i32,
  |     ^^^^^^
6 |     left: i32,
  |     ^^^^
  |
  = note: `Inset` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
  = note: `#[warn(dead_code)]` on by default

warning: fields `row` and `col` are never read
 --> src/text.rs:5:5
  |
4 | pub struct Position {
  |            -------- fields in this struct
5 |     row: usize,
  |     ^^^
6 |     col: usize,
  |     ^^^

warning: function `xd` is never used
  --> src/text.rs:28:4
   |
28 | fn xd() {
   |    ^^

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
  --> src/printers/traditional/aligners.rs:17:22
   |
17 |         parent_node: &Box<dyn TreeNode>,
   |                      ^^^^^^^^^^^^^^^^^^ help: try: `&dyn TreeNode`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box
   = note: `#[warn(clippy::borrowed_box)]` on by default

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
  --> src/printers/traditional/aligners.rs:20:29
   |
20 |         width_map: &HashMap<&Box<dyn TreeNode>, i32>,
   |                             ^^^^^^^^^^^^^^^^^^ help: try: `&dyn TreeNode`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
  --> src/printers/traditional/aligners.rs:25:15
   |
25 |         node: &'a Box<dyn TreeNode>,
   |               ^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a dyn TreeNode`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
  --> src/printers/traditional/aligners.rs:26:19
   |
26 |     ) -> (HashMap<&'a Box<dyn TreeNode>, i32>, i32);
   |                   ^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a dyn TreeNode`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

warning: name `TOP` contains a capitalized acronym
  --> src/printers/traditional/aligners.rs:45:9
   |
45 |         TOP,
   |         ^^^ help: consider making the acronym lowercase, except the initial letter: `Top`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms
   = note: `#[warn(clippy::upper_case_acronyms)]` on by default

warning: name `BOTTOM` contains a capitalized acronym
  --> src/printers/traditional/aligners.rs:46:9
   |
46 |         BOTTOM,
   |         ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Bottom`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
   --> src/printers/traditional/aligners.rs:241:19
    |
241 |             root: &'a Box<dyn TreeNode>,
    |                   ^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a dyn TreeNode`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
   --> src/printers/traditional/aligners.rs:242:37
    |
242 |             width_map: &mut HashMap<&'a Box<dyn TreeNode>, i32>,
    |                                     ^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a dyn TreeNode`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

error: casting `i32` to `usize` may lose the sign of the value
  --> src/printers/traditional/liners.rs:47:50
   |
47 |         let mut top_connection_line = " ".repeat((top_connection - start) as usize);
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss
   = note: `-D clippy::cast-sign-loss` implied by `-D clippy::pedantic`
   = help: to override `-D clippy::pedantic` add `#[allow(clippy::cast_sign_loss)]`

error: casting `i32` to `usize` may lose the sign of the value
  --> src/printers/traditional/liners.rs:51:26
   |
51 |             buffer.write((row + i) as usize, start as usize, &top_connection_line);
   |                          ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

error: casting `i32` to `usize` may lose the sign of the value
  --> src/printers/traditional/liners.rs:51:46
   |
51 |             buffer.write((row + i) as usize, start as usize, &top_connection_line);
   |                                              ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

error: casting `i32` to `usize` may lose the sign of the value
  --> src/printers/traditional/liners.rs:76:26
   |
76 |             buffer.write((row + i) as usize, start as usize, &bottom_connection_line);
   |                          ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

error: casting `i32` to `usize` may lose the sign of the value
  --> src/printers/traditional/liners.rs:76:46
   |
76 |             buffer.write((row + i) as usize, start as usize, &bottom_connection_line);
   |                                              ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

error: casting `i32` to `usize` may lose the sign of the value
  --> src/printers/traditional/liners.rs:98:13
   |
98 |             (row + self.top_height) as usize,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

error: casting `i32` to `usize` may lose the sign of the value
  --> src/printers/traditional/liners.rs:99:13
   |
99 |             start as usize,
   |             ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

error: boolean to int conversion using if
   --> src/printers/traditional/liners.rs:179:57
    |
179 |         let top_height_with_bracket = self.top_height + if self.display_bracket { 1 } else { 0 };
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with from: `i32::from(self.display_bracket)`
    |
    = note: `self.display_bracket as i32` or `self.display_bracket.into()` can also be valid options
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_to_int_with_if
    = note: `-D clippy::bool-to-int-with-if` implied by `-D clippy::pedantic`
    = help: to override `-D clippy::pedantic` add `#[allow(clippy::bool_to_int_with_if)]`

error: item name starts with its containing module's name
  --> src/printers/traditional.rs:12:12
   |
12 | pub struct TraditionalTreePrinter<W: Write, A: Aligner, L: Liner<W>> {
   |            ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions
   = note: `-D clippy::module-name-repetitions` implied by `-D clippy::pedantic`
   = help: to override `-D clippy::pedantic` add `#[allow(clippy::module_name_repetitions)]`

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
  --> src/printers/traditional.rs:57:32
   |
57 |         position_map: &HashMap<&'a Box<dyn TreeNode>, Position>,
   |                                ^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a dyn TreeNode`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
  --> src/printers/traditional.rs:58:29
   |
58 |         width_map: &HashMap<&Box<dyn TreeNode>, i32>,
   |                             ^^^^^^^^^^^^^^^^^^ help: try: `&dyn TreeNode`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
  --> src/printers/traditional.rs:59:18
   |
59 |     ) -> HashMap<&'a Box<dyn TreeNode>, Position> {
   |                  ^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a dyn TreeNode`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

error: used `unwrap()` on an `Option` value
  --> src/printers/traditional.rs:75:36
   |
75 |             let min_child_bottom = child_bottoms.iter().min().unwrap(); // TODO: Error handling
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used
   = note: requested on the command line with `-D clippy::unwrap-used`

error: used `unwrap()` on a `Result` value
  --> src/printers/traditional.rs:76:13
   |
76 |             buffer.flush(*min_child_bottom as usize).unwrap(); // TODO: Error handling
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is an `Err`, it will panic
   = help: consider using `expect()` to provide a better panic message
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

error: casting `i32` to `usize` may lose the sign of the value
  --> src/printers/traditional.rs:76:26
   |
76 |             buffer.flush(*min_child_bottom as usize).unwrap(); // TODO: Error handling
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
  --> src/printers/traditional.rs:85:15
   |
85 |         root: &'a Box<dyn TreeNode>,
   |               ^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a dyn TreeNode`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
  --> src/printers/traditional.rs:93:40
   |
93 |         new_position_map: &mut HashMap<&'a Box<dyn TreeNode>, Position>,
   |                                        ^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a dyn TreeNode`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

warning: you seem to be trying to use `&Box<T>`. Consider using just `&T`
  --> src/printers/traditional.rs:94:29
   |
94 |         width_map: &HashMap<&Box<dyn TreeNode>, i32>,
   |                             ^^^^^^^^^^^^^^^^^^ help: try: `&dyn TreeNode`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box

error: used `unwrap()` on an `Option` value
   --> src/printers/traditional.rs:113:32
    |
113 |             let child_width = *width_map.get(child).unwrap(); // TODO: Error handling
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is `None`, it will panic
    = help: consider using `expect()` to provide a better panic message
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

error: casting `i32` to `usize` may lose the sign of the value
   --> src/printers/traditional.rs:150:26
    |
150 |             buffer.write(*row as usize, *left as usize, &child.content());
    |                          ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

error: casting `i32` to `usize` may lose the sign of the value
   --> src/printers/traditional.rs:150:41
    |
150 |             buffer.write(*row as usize, *left as usize, &child.content());
    |                                         ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

error: casting `i32` to `usize` may lose the sign of the value
   --> src/printers/traditional.rs:188:25
    |
188 |         buffer.write(0, left as usize, &root_content);
    |                         ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

error: used `unwrap()` on a `Result` value
   --> src/printers/traditional.rs:189:9
    |
189 |         buffer.flush_all().unwrap(); // TODO: Error handling
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: consider using `expect()` to provide a better panic message
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

error: used `unwrap()` on a `Result` value
   --> src/printers/traditional.rs:195:9
    |
195 |         buffer.flush_all().unwrap(); // TODO: Error handling
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: consider using `expect()` to provide a better panic message
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

error: item name ends with its containing module's name
  --> src/tree_node.rs:61:12
   |
61 | pub struct SimpleTreeNode {
   |            ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

error: item name ends with its containing module's name
   --> src/tree_node.rs:110:12
    |
110 | pub struct PlaceholderTreeNode(Vec<Box<dyn TreeNode>>);
    |            ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

error: docs for function returning `Result` missing `# Errors` section
  --> src/text.rs:10:5
   |
10 | /     pub fn new<Num1, Num2>(row: Num1, col: Num2) -> Result<Self, Box<dyn std::error::Error>>
11 | |     where
12 | |         Num1: PrimInt,
13 | |         Num2: PrimInt,
14 | |         usize: TryFrom<Num1> + TryFrom<Num2>,
15 | |         <usize as TryFrom<Num1>>::Error: std::error::Error + 'static,
16 | |         <usize as TryFrom<Num2>>::Error: std::error::Error + 'static,
   | |_____________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc
   = note: `-D clippy::missing-errors-doc` implied by `-D clippy::pedantic`
   = help: to override `-D clippy::pedantic` add `#[allow(clippy::missing_errors_doc)]`

error: this method could have a `#[must_use]` attribute
  --> src/text.rs:23:5
   |
23 |     pub const fn from_usize(row: usize, col: usize) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub const fn from_usize(row: usize, col: usize) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
   = note: `-D clippy::must-use-candidate` implied by `-D clippy::pedantic`
   = help: to override `-D clippy::pedantic` add `#[allow(clippy::must_use_candidate)]`

error: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
 --> src/util.rs:4:9
  |
4 | /         lines
5 | |             .clone()
6 | |             .max_by(|s1, s2| s1.len().cmp(&s2.len()))
7 | |             .unwrap_or_default()
8 | |             .len() as i32,
  | |_________________________^
  |
  = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
  = note: `-D clippy::cast-possible-truncation` implied by `-D clippy::pedantic`
  = help: to override `-D clippy::pedantic` add `#[allow(clippy::cast_possible_truncation)]`
help: ... or use `try_from` and handle the error accordingly
  |
4 ~         i32::try_from(lines
5 +             .clone()
6 +             .max_by(|s1, s2| s1.len().cmp(&s2.len()))
7 +             .unwrap_or_default()
8 ~             .len()),
  |

error: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
 --> src/util.rs:4:9
  |
4 | /         lines
5 | |             .clone()
6 | |             .max_by(|s1, s2| s1.len().cmp(&s2.len()))
7 | |             .unwrap_or_default()
8 | |             .len() as i32,
  | |_________________________^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap
  = note: `-D clippy::cast-possible-wrap` implied by `-D clippy::pedantic`
  = help: to override `-D clippy::pedantic` add `#[allow(clippy::cast_possible_wrap)]`

error: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
 --> src/util.rs:9:9
  |
9 |         lines.count() as i32,
  |         ^^^^^^^^^^^^^^^^^^^^
  |
  = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
  |
9 |         i32::try_from(lines.count()),
  |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
 --> src/util.rs:9:9
  |
9 |         lines.count() as i32,
  |         ^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `tree-printer` (lib) generated 18 warnings
error: could not compile `tree-printer` (lib) due to 26 previous errors; 18 warnings emitted
